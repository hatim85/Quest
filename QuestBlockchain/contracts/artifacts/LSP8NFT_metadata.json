{
	"compiler": {
		"version": "0.8.28+commit.7893614a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "lsp8TokenIdType",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "isNFT",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ERC725Y_DataKeysValuesEmptyArray",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC725Y_DataKeysValuesLengthMismatch",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC725Y_MsgValueDisallowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "storedData",
						"type": "bytes"
					}
				],
				"name": "InvalidExtensionAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "InvalidFunctionSelector",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP4TokenNameNotEditable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP4TokenSymbolNotEditable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP4TokenTypeNotEditable",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "callIndex",
						"type": "uint256"
					}
				],
				"name": "LSP8BatchCallFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP8CannotSendToAddressZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP8CannotUseAddressZeroAsOperator",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP8InvalidTransferBatch",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "LSP8NonExistentTokenId",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "LSP8NonExistingOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "LSP8NotTokenOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "LSP8NotTokenOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "LSP8NotifyTokenReceiverContractMissingLSP1Interface",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "LSP8NotifyTokenReceiverIsEOA",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "LSP8OperatorAlreadyAuthorized",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "caller",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "LSP8RevokeOperatorNotAuthorized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP8TokenContractCannotHoldValue",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "LSP8TokenIdAlreadyMinted",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP8TokenIdFormatNotEditable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP8TokenIdsDataEmptyArray",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP8TokenIdsDataLengthMismatch",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP8TokenOwnerCannotBeOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "LSP8TokenOwnerChanged",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "functionSelector",
						"type": "bytes4"
					}
				],
				"name": "NoExtensionFoundForFunctionSelector",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OwnableCannotSetZeroAddressAsOwner",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "DataChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "OperatorAuthorizationChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "notified",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "OperatorRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "TokenIdDataChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "authorizeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "batchCalls",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					}
				],
				"name": "getData",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					}
				],
				"name": "getDataBatch",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "tokenIds",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					}
				],
				"name": "getDataBatchForTokenIds",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					}
				],
				"name": "getDataForTokenId",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "getOperatorsOf",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "isOperatorFor",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "questManager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "notify",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "revokeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "setData",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"name": "setDataBatch",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "tokenIds",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"name": "setDataBatchForTokenIds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "setDataForTokenId",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_questManager",
						"type": "address"
					}
				],
				"name": "setQuestManager",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "tokenIdsOf",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					}
				],
				"name": "tokenOwnerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "from",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "to",
						"type": "address[]"
					},
					{
						"internalType": "bytes32[]",
						"name": "tokenId",
						"type": "bytes32[]"
					},
					{
						"internalType": "bool[]",
						"name": "force",
						"type": "bool[]"
					},
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "transferBatch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"ERC725Y_DataKeysValuesEmptyArray()": [
					{
						"details": "Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."
					}
				],
				"ERC725Y_DataKeysValuesLengthMismatch()": [
					{
						"details": "Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."
					}
				],
				"ERC725Y_MsgValueDisallowed()": [
					{
						"details": "Reverts when sending value to the {setData} or {setDataBatch} function."
					}
				],
				"InvalidExtensionAddress(bytes)": [
					{
						"details": "reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"
					}
				],
				"InvalidFunctionSelector(bytes)": [
					{
						"details": "reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"
					}
				],
				"LSP4TokenNameNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."
					}
				],
				"LSP4TokenSymbolNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."
					}
				],
				"LSP4TokenTypeNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."
					}
				],
				"LSP8BatchCallFailed(uint256)": [
					{
						"details": "Reverts when a batch call failed."
					}
				],
				"LSP8CannotSendToAddressZero()": [
					{
						"details": "Reverts when trying to send token to the zero address."
					}
				],
				"LSP8CannotUseAddressZeroAsOperator()": [
					{
						"details": "Reverts when trying to set the zero address as an operator."
					}
				],
				"LSP8InvalidTransferBatch()": [
					{
						"details": "Reverts when the parameters used for `transferBatch` have different lengths."
					}
				],
				"LSP8NonExistentTokenId(bytes32)": [
					{
						"details": "Reverts when `tokenId` has not been minted."
					}
				],
				"LSP8NonExistingOperator(address,bytes32)": [
					{
						"details": "Reverts when `operator` is not an operator for the `tokenId`."
					}
				],
				"LSP8NotTokenOperator(bytes32,address)": [
					{
						"details": "Reverts when `caller` is not an allowed operator for `tokenId`."
					}
				],
				"LSP8NotTokenOwner(address,bytes32,address)": [
					{
						"details": "Reverts when `caller` is not the `tokenOwner` of the `tokenId`."
					}
				],
				"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)": [
					{
						"details": "Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."
					}
				],
				"LSP8NotifyTokenReceiverIsEOA(address)": [
					{
						"details": "Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."
					}
				],
				"LSP8OperatorAlreadyAuthorized(address,bytes32)": [
					{
						"details": "Reverts when `operator` is already authorized for the `tokenId`."
					}
				],
				"LSP8RevokeOperatorNotAuthorized(address,address,bytes32)": [
					{
						"details": "Reverts when the call to revoke operator is not authorized."
					}
				],
				"LSP8TokenContractCannotHoldValue()": [
					{
						"details": "Error occurs when sending native tokens to the LSP8 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension."
					}
				],
				"LSP8TokenIdAlreadyMinted(bytes32)": [
					{
						"details": "Reverts when `tokenId` has already been minted."
					}
				],
				"LSP8TokenIdFormatNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed. The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract. It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed."
					}
				],
				"LSP8TokenIdsDataEmptyArray()": [
					{
						"details": "Reverts when empty arrays is passed to the function"
					}
				],
				"LSP8TokenIdsDataLengthMismatch()": [
					{
						"details": "Reverts when the length of the token IDs data arrays is not equal"
					}
				],
				"LSP8TokenOwnerCannotBeOperator()": [
					{
						"details": "Reverts when trying to authorize or revoke the token's owner as an operator."
					}
				],
				"LSP8TokenOwnerChanged(bytes32,address,address)": [
					{
						"details": "Reverts when the token owner changed inside the {_beforeTokenTransfer} hook."
					}
				],
				"NoExtensionFoundForFunctionSelector(bytes4)": [
					{
						"details": "reverts when there is no extension for the function selector being called with"
					}
				],
				"OwnableCannotSetZeroAddressAsOwner()": [
					{
						"details": "Reverts when trying to set `address(0)` as the contract owner when deploying the contract or initializing it."
					}
				]
			},
			"events": {
				"DataChanged(bytes32,bytes)": {
					"details": "Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.",
					"params": {
						"dataKey": "The data key for which a bytes value is set.",
						"dataValue": "The value to set for the given data key."
					}
				},
				"OperatorAuthorizationChanged(address,address,bytes32,bytes)": {
					"details": "Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.",
					"params": {
						"operator": "The address authorized as an operator.",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenId": "The tokenId `operator` address has access on behalf of `tokenOwner`.",
						"tokenOwner": "The owner of the `tokenId`."
					}
				},
				"OperatorRevoked(address,address,bytes32,bool,bytes)": {
					"details": "Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.",
					"params": {
						"notified": "Bool indicating whether the operator has been notified or not",
						"operator": "The address revoked from the operator array ({getOperatorsOf}).",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenId": "The tokenId `operator` is revoked from operating on.",
						"tokenOwner": "The owner of the `tokenId`."
					}
				},
				"TokenIdDataChanged(bytes32,bytes32,bytes)": {
					"details": "Emitted when setting data for `tokenId`.",
					"params": {
						"dataKey": "The data key for which a bytes value is set.",
						"dataValue": "The value to set for the given data key.",
						"tokenId": "The tokenId which data is set for."
					}
				},
				"Transfer(address,address,address,bytes32,bool,bytes)": {
					"details": "Emitted when `tokenId` token is transferred from the `from` to the `to` address.",
					"params": {
						"data": "Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.",
						"force": "If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.",
						"from": "The previous owner of the `tokenId`",
						"operator": "The address of operator that sent the `tokenId`",
						"to": "The new owner of `tokenId`",
						"tokenId": "The tokenId that was transferred"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"authorizeOperator(address,bytes32,bytes)": {
					"details": "Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard",
					"params": {
						"operator": "The address to authorize as an operator.",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenId": "The token ID operator has access to."
					}
				},
				"balanceOf(address)": {
					"details": "Get the number of token IDs owned by `tokenOwner`.",
					"params": {
						"tokenOwner": "The address to query     *"
					},
					"returns": {
						"_0": "The total number of token IDs that `tokenOwner` owns."
					}
				},
				"batchCalls(bytes[])": {
					"custom:info": "It's not possible to send value along the functions call due to the use of `delegatecall`.",
					"details": "Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.",
					"params": {
						"data": "An array of ABI encoded function calls to be called on the contract."
					},
					"returns": {
						"results": "An array of abi-encoded data returned by the functions executed."
					}
				},
				"getData(bytes32)": {
					"details": "Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.",
					"params": {
						"dataKey": "The data key for which to retrieve the value."
					},
					"returns": {
						"dataValue": "The bytes value stored under the specified data key."
					}
				},
				"getDataBatch(bytes32[])": {
					"details": "Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.",
					"params": {
						"dataKeys": "The array of keys which values to retrieve"
					},
					"returns": {
						"dataValues": "The array of data stored at multiple keys"
					}
				},
				"getDataBatchForTokenIds(bytes32[],bytes32[])": {
					"params": {
						"dataKeys": "An array of data keys corresponding to the token IDs.",
						"tokenIds": "An array of token IDs."
					},
					"returns": {
						"dataValues": "An array of data values for each pair of `tokenId` and `dataKey`."
					}
				},
				"getDataForTokenId(bytes32,bytes32)": {
					"params": {
						"dataKey": "The key for the data to retrieve.",
						"tokenId": "The unique identifier for a token."
					},
					"returns": {
						"dataValue": "The data value associated with the given `tokenId` and `dataKey`."
					}
				},
				"getOperatorsOf(bytes32)": {
					"details": "Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.",
					"params": {
						"tokenId": "The token ID to get the operators for."
					},
					"returns": {
						"_0": "An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."
					}
				},
				"isOperatorFor(address,bytes32)": {
					"details": "Returns whether `operator` address is an operator for a given `tokenId`.",
					"params": {
						"operator": "The address to query operator status for.",
						"tokenId": "The token ID to check if `operator` is allowed to operate on."
					},
					"returns": {
						"_0": "`true` if `operator` is an operator for `tokenId`, `false` otherwise."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"revokeOperator(address,bytes32,bool,bytes)": {
					"details": "Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.",
					"params": {
						"notify": "Boolean indicating whether to notify the operator or not",
						"operator": "The address to revoke as an operator.",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenId": "The tokenId `operator` is revoked from operating on."
					}
				},
				"setData(bytes32,bytes)": {
					"custom:events": "{DataChanged} event.",
					"custom:requirements": "- SHOULD only be callable by the {owner}.",
					"custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**. If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.",
					"details": "Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.",
					"params": {
						"dataKey": "The data key for which to set a new value.",
						"dataValue": "The new bytes value to set."
					}
				},
				"setDataBatch(bytes32[],bytes[])": {
					"custom:events": "{DataChanged} event **for each data key/value pair set**.",
					"custom:requirements": "- SHOULD only be callable by the {owner} of the contract.",
					"custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**. If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.",
					"details": "Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.",
					"params": {
						"dataKeys": "An array of data keys to set bytes values for.",
						"dataValues": "An array of bytes values to set for each `dataKeys`."
					}
				},
				"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])": {
					"params": {
						"dataKeys": "An array of data keys corresponding to the token IDs.",
						"dataValues": "An array of values to set for the given data keys.",
						"tokenIds": "An array of token IDs."
					}
				},
				"setDataForTokenId(bytes32,bytes32,bytes)": {
					"params": {
						"dataKey": "The key for the data to set.",
						"dataValue": "The value to set for the given data key.",
						"tokenId": "The unique identifier for a token."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"tokenIdsOf(address)": {
					"details": "Returns the list of token IDs that the `tokenOwner` address owns.",
					"params": {
						"tokenOwner": "The address that we want to get the list of token IDs for."
					},
					"returns": {
						"_0": "An array of `bytes32[] tokenIds` owned by `tokenOwner`."
					}
				},
				"tokenOwnerOf(bytes32)": {
					"details": "Returns the address that owns a given `tokenId`.",
					"params": {
						"tokenId": "The token ID to query the owner for."
					},
					"returns": {
						"_0": "The owner address of the given `tokenId`."
					}
				},
				"totalSupply()": {
					"details": "Returns the number of existing tokens that have been minted in this contract.",
					"returns": {
						"_0": "The number of existing tokens."
					}
				},
				"transfer(address,address,bytes32,bool,bytes)": {
					"details": "Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.",
					"params": {
						"data": "Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.",
						"force": "When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.",
						"from": "The address that owns the given `tokenId`.",
						"to": "The address that will receive the `tokenId`.",
						"tokenId": "The token ID to transfer."
					}
				},
				"transferBatch(address[],address[],bytes32[],bool[],bytes[])": {
					"details": "Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.",
					"params": {
						"data": "Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.",
						"force": "When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.",
						"from": "An array of sending addresses.",
						"to": "An array of recipient addresses.",
						"tokenId": "An array of token IDs to transfer."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"LSP8BatchCallFailed(uint256)": [
					{
						"notice": "Batch call failed."
					}
				],
				"LSP8TokenContractCannotHoldValue()": [
					{
						"notice": "LSP8 contract cannot receive native tokens."
					}
				]
			},
			"events": {
				"DataChanged(bytes32,bytes)": {
					"notice": "The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."
				}
			},
			"kind": "user",
			"methods": {
				"batchCalls(bytes[])": {
					"notice": "Executing the following batch of abi-encoded function calls on the contract: `data`."
				},
				"getData(bytes32)": {
					"notice": "Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."
				},
				"getDataBatch(bytes32[])": {
					"notice": "Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."
				},
				"getDataBatchForTokenIds(bytes32[],bytes32[])": {
					"notice": "Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."
				},
				"getDataForTokenId(bytes32,bytes32)": {
					"notice": "Retrieves data for a specific `tokenId` and `dataKey`."
				},
				"setData(bytes32,bytes)": {
					"notice": "Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."
				},
				"setDataBatch(bytes32[],bytes[])": {
					"notice": "Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."
				},
				"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])": {
					"notice": "Sets data in batch for multiple `tokenId` and `dataKey` pairs."
				},
				"setDataForTokenId(bytes32,bytes32,bytes)": {
					"notice": "Sets data for a specific `tokenId` and `dataKey`."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/LSP8NFT.sol": "LSP8NFT"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@erc725/smart-contracts-v8/contracts/ERC725Y.sol": {
			"keccak256": "0x209d6b52eb0d5dcb8c180773dd67e507f603c98ede7e5a64457752159a52ad3d",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://dbfa427c80ba998d30c721fb41795502d19aa09acb8e1f59f6982d080f029692",
				"dweb:/ipfs/QmPQXeYEU7kaDtskZ1ha2umRuGSrFTfXfpyiGgBSQfwZBn"
			]
		},
		"@erc725/smart-contracts-v8/contracts/constants.sol": {
			"keccak256": "0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fb9436bd587d7b38c532f317dbd4bc5f178b50906b1a5e29adf24908f27b2c47",
				"dweb:/ipfs/QmW2vTCNM7Mr4vW5t9yBK7Zmh1FtaVjPwdAbyFcPNBSZYL"
			]
		},
		"@erc725/smart-contracts-v8/contracts/errors.sol": {
			"keccak256": "0x198fece17fcfec61d40d3453ebbaa49760968ea8caa128dd5314a12b98ecec66",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5e705131b03cf4167ff312e7ebaa679cf56c22b01de518dfa4d2163d7e1ddb8b",
				"dweb:/ipfs/QmbH8q7MgrR7fJm1QEmYoKcnZCxWwejt4Jum2DUYmLJAGA"
			]
		},
		"@erc725/smart-contracts-v8/contracts/interfaces/IERC725Y.sol": {
			"keccak256": "0x943d0f67d6455cfb1bed5d1fb77995df0b202ecdbb028fa0e85bc26bcd3219a5",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://c3b8b0daa2fed9c0513444120b87beec7c2b102eadbcbeccae73ece67819a658",
				"dweb:/ipfs/QmaSb9Xhma6UwhK1FosJtbP8EkBn8i9PTcLKg5FU1VAJSH"
			]
		},
		"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
			"keccak256": "0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://59076395f660838919a2068cb7792c0fa70533642bbc5b4e3cc3cbb2c9ec7b50",
				"dweb:/ipfs/QmQqew3mDuyHCBdd4v1JiwRiKEbzk3LeHchzTHSdyhYg5b"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol": {
			"keccak256": "0x592c53c23d21eb3cbc4e453db0fe1fdcbe1ac9dd740d09309b836d118a8ecf34",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fe0addf5ad37bc784af425726b0f8aae8ceaa53859ac55b25259963bb00f8a7c",
				"dweb:/ipfs/QmVzLVeUHT7kMMUKgR49X6GFoTQ81f2QQF5L6hs7zjHp7K"
			]
		},
		"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol": {
			"keccak256": "0x72dd4f342e059edd246032d2cd2e45707453ceb27c187161e31af345d058dced",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://9a8fb9c285da565984f6a168ecee00a647b988a829c218813e9d2e007b28b48d",
				"dweb:/ipfs/QmbXznWjhZPLXWF6NJAyVKD8ZReSWZaJyRdYZMLWaQHZWa"
			]
		},
		"@lukso/lsp1-contracts/contracts/LSP1Constants.sol": {
			"keccak256": "0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c7d83f054b71dfa5ca48a9a811e6a985ff6b38a9e5f4c220ea2ec3a322cce7cf",
				"dweb:/ipfs/QmaehpHpqc5dtRCm9BoU8vCY59AeEnmGvmmwPirVr47oGp"
			]
		},
		"@lukso/lsp1-contracts/contracts/LSP1Utils.sol": {
			"keccak256": "0x7dd32ff416b7275c5dbb8daa39c0f13bb1b4db2df8132221fc07619dbfe08cd0",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fc3eaaa85cb6e14939417ba73729e65722f95c9db714bfda173a438fc2ce771d",
				"dweb:/ipfs/QmTg39yTVneeptAGBDTfGJfYrQMXJ153Y7VN4hJE2eNf1o"
			]
		},
		"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol": {
			"keccak256": "0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://880c3b21e2090a14e7bba94ac5c8d4633e8a81d93c6f619454167a01dcc866d8",
				"dweb:/ipfs/QmZp6YVM4Eor5XtuXXqGRaPAJ3u5KCmLwuNRAGf4JY7sK1"
			]
		},
		"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol": {
			"keccak256": "0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f1b93e7eb5a88a2f42a9dfa061ca5e93e7650cd9114010faa18faf0a5508f579",
				"dweb:/ipfs/QmXmLhf1ejsF7G1FZnvpTBRS9oQ9ZTuqCBRT1im3vAuUYW"
			]
		},
		"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol": {
			"keccak256": "0x4536ed09238f33ca9d40ed2e7c6254aac84bf81010b3524711524ae7fd30227c",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://abaed57358cb811d3b368d52f66db3c1327b96c38301d6eccf2ffaa6d5fa5928",
				"dweb:/ipfs/QmS1FtQH4Gn6xYrHCTHWJwxgAURvGvvfypsuQ2rRhrkPgi"
			]
		},
		"@lukso/lsp2-contracts/contracts/LSP2Utils.sol": {
			"keccak256": "0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://7ebb6d1152f88b459b9e8fc3ef6361a9fb9d03bfa994148e6b125a2ee4025487",
				"dweb:/ipfs/QmX18bCecAtrjqKTyCPqRrUuvVYSW1XZZJUgvjfYnqfmEH"
			]
		},
		"@lukso/lsp4-contracts/contracts/LSP4Constants.sol": {
			"keccak256": "0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://bb36a427cdfa0f394d2d78014f85152ab383499fc3c3d6285d4b801c656e7c3f",
				"dweb:/ipfs/QmZJehfeWKfHLyZLufhs9u4ZyVztGCUNWXzFgfZSU837vU"
			]
		},
		"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol": {
			"keccak256": "0x6a718979925b05064c15e4de4b376dadec8d107d720aa762d22a06e44ed67fa4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://3c82f6c8133c4d35d8cbbfc4da647204989acc5f38980be787263881e9f732f5",
				"dweb:/ipfs/QmdhHBnJvvo4Ax183HgHkL7w5A4w3ADXDQuewocnTVqsW6"
			]
		},
		"@lukso/lsp4-contracts/contracts/LSP4Errors.sol": {
			"keccak256": "0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5aded62a160ed7f9860996004d1656e8592b3f97d478d8597f8ad6afbe4f34b7",
				"dweb:/ipfs/QmcnmLVt8cmz1iRNaX5c6iNYckRgUXGz8YkjHW9T1KNB5A"
			]
		},
		"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol": {
			"keccak256": "0x2ca5a81c6c006030e2204d2a9997b15e954bc0696959c051a570c8a19eac4786",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://bef5bbbad59c2dbd09e9e80ffe2dcf6dc3da5101d4f4b8beedcb0245d04b7b8a",
				"dweb:/ipfs/QmQYeCHfTtCTQVpy36De1d1vFacvbjTNipxDRNWuCQPNo6"
			]
		},
		"@lukso/lsp8-contracts/contracts/LSP8Constants.sol": {
			"keccak256": "0xe958d7d5ab694eb054df65ef6fb37864ff9da33604a28a14ca42e25c23629065",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://41f8b02e4c05b6eb3cfc447dae5862e38ba100269c56bb8d23ab26255085a41e",
				"dweb:/ipfs/QmVgeWYBovEJR1Xqph5AuJoP5EizSuY77gUUDmt48wmgWm"
			]
		},
		"@lukso/lsp8-contracts/contracts/LSP8Errors.sol": {
			"keccak256": "0xff2c1791043272eb4a7c05bc77fa0a0234678991b0700f84d92edbd31fefd905",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://72b32242e8a4b7c12355de3f1c463437a81d8d5f8d34b3a8d25d726340b891c0",
				"dweb:/ipfs/Qmbhz53zdudSQbPwES2qMHqLHaph4GhigNETC481VWwK6J"
			]
		},
		"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol": {
			"keccak256": "0x1f707425bbcd5a84c7de2ad8ba9c2f620617b5f6483074c27ad6f259d91b7dd2",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://799901e6bb5e3465a610d88dd4d314bac0aa787e8aaffd69e960e3e0975bda60",
				"dweb:/ipfs/QmVtLccrrEmvJuMiTFDrbxFuBQcSR8u9St14jXtFB9tmE8"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439",
			"license": "MIT",
			"urls": [
				"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c",
				"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
			"keccak256": "0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f7bb74cf88fd88daa34e118bc6e363381d05044f34f391d39a10c0c9dac3ebd",
				"dweb:/ipfs/QmNbQ3v8v4zuDtg7VeLAbdhAm3tCzUodNoDZZ8ekmCHWZX"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514",
			"license": "MIT",
			"urls": [
				"bzz-raw://20bf19b2b851f58a4c24543de80ae70b3e08621f9230eb335dc75e2d4f43f5df",
				"dweb:/ipfs/QmSYuH1AhvJkPK8hNvoPqtExBcgTB42pPRHgTHkS5c5zYW"
			]
		},
		"contracts/LSP8NFT.sol": {
			"keccak256": "0x303f5fcdb9f7608b3e244ccfe5e25b91118ad216ffc967a1e6454ea8510f99dc",
			"license": "MIT",
			"urls": [
				"bzz-raw://8fe0b6d2b24c07cfc1a403154069d756c8607e6d1790555d3b57387568442534",
				"dweb:/ipfs/QmQ8t9NzMXFrSgATMuDVmwQKxa3w6FKeuvYkxUsMiB5b2f"
			]
		}
	},
	"version": 1
}